************************************************************************
*  R E F A L - 6       Copyright (C) 1992 by Arkady Klimov             *
*       rcmain.ref  - main module of refal compiler                    *
************************************************************************

$EXTBOX SYSINFO,MODTABLE;
$EXTBOX Lineno, Ftable, Rest, Modname, Typename;
$EXTBOX Extern, Errfl;
$EXTERN Inifls;                            /* From rclist  */
$EXTERN Getdef, Testdef, Extdef, Use, Def; /* From rssyn   */
$EXTERN ERR, ERR0, Flag, Setflags;         /* From rsserv  */
$EXTERN Oneof, Open, ERASE, CLOAD, Ptime;  /* From rsserv  */
$EXTERN CompFile, CompMem;                 /* From rcout */
$EXTERN SWAP;                              /* From i */

$BOX ExitValue;

$ENTRY GO { =
      <PRINTLN "Refal-6 Compiler. Copyright (C) 1993 by Ark. Klimov"> =
      <SETV *ExitValue> =
      <COMP <GETV <SHIFT <GET *SYSARG> 0 -1>>> =
        <Flag 'M'> : { (eZ) = ; tZ = <EXIT <GETV *ExitValue>> };
   };
   
* Entry to call the compiler from refal
$ENTRY COMP eA = <Init <Regs eA>>;
$ENTRY "comp" eA = <COMP eA>;

$ENTRY CL eA = <COMP eA "/M">;
$ENTRY "cl" eA = <CL eA>;

Regs {
   = ()
    <PRINTLN>
    <PRINTLN "Command line syntax:">
    <PRINTLN "   rf c [switches] file1 file2 ...">
    <PRINTLN "switch /L - make a listfile FILEi.RFL">
    <PRINTLN "switch /M - compile to memory">
    <PRINTLN "switch /U - uppercase words in source text">
    <PRINTLN "switch /5 - no special meaning for BackSlash in strings">
    <PRINTLN "switch /W or /N or /S - "
                "make code in word or number or symbol format">
    <PRINTLN "switch /V or /C - make code for vector or chain format">
    <PRINTLN "switch /Xxxx - output file with extension .xxx">
    <PRINTLN " SET RESTYPE = XXX redefines extension of result: FILEi.XXX">
    <PRINTLN "switch /Yyy  - use compiler module RSSYNTyy.RSW for parsing">;
   e1 tA e2, <GETV tA> : '/' sd eX , <UPPER sd> : sD = (sD eX) <Regs e1 e2>;
   e1 = (e1);
   };

Init { eR (eF) = <Setflags eR> <Trfiles eF> };

Trfiles {
   t1 e2 = <Trfile <GETV t1>> <Trfiles e2>;
   = ;
   };
Trfile ef = <Opinp <Mkext <LOWER ef> ()>> <Inifls> : {
    e1 F e2 =;
    e1 = <Compmod <Parse>>;
    };




Mkext {
   e1 '.' (e2) = e1 (e2);
   e1 sx (e2) , <Oneof sx ('/\\')> : F = <Mkext e1 (sx e2)>;
   e1 (e2) = e1 e2 ('ref');
   };

Opinp { eN (eX) , <Open 'r' 12 eN '.' eX> : {
    T , <SETV *Modname eN> <SETV *Typename eX>
        <PRINTLN eN'.'eX':'> : ez
          = <Oplst <Flag 'L'> eN '.rfl'>;
    F = F <ERR0 "Unable to open " eN '.' eX>;
};  };

Oplst {
   () e1 , <Open 'w' 5 e1> : {
          T = (e1);
          F = F <ERR0 "Unable to open " e1>;
          };
*     Erase old RFL-file
   tZ e1 = <ERASE e1>;
   };

Parse = <CLOAD *Getdef <SyntModName>>
      = <Ptime "Parsing time = " *Syntax>;

SyntModName = <Flag 'Y'> : { F = "rssynt"; (ex) = <SETV X 'rssynt' ex> };

Syntax { , <SETV *Lineno 0> <MAKE TABLE *Ftable> <SETV *Extern>
           <SETV *Errfl> <SETV *Rest>
           = <GetMod () > /* <Testdef> */ };

* <GetMod (e.Stack) e.Prog> => e.Prog'
* Each element of stack is (t.Extern t.Ftable e.Prog)
*  = a state when statement $MODULE was encountered
GetMod  (e.Stack) e.Prog , <Getdef> : {
     0 , e.Stack : {
        = <Testdef> = <Extdef> : {
           = e.Prog;
           ez = (Module <Swaps () ()> e.Prog);
           };
        eZ = <ERR "Unexpected end of file. $END is expected">;
        };
     (Module ex)
           = <GetMod (e.Stack (<Swaps () ()> e.Prog)) >;
     (End ex) , e.Stack : {
        = <ERR "Unbalanced $END"> = <GetMod (e.Stack) e.Prog>;
        eS (t.Ext t.Tbl e.Pr) = <Testdef>
           = <Extdef> : e.Exdf
           = <GETV *Extern> : e.Ext1
           = <GetMod (eS) e.Pr (Module <Swaps t.Ext t.Tbl>
* Use and Def deal with new environment, changed by Swaps
                         <Use e.Ext1> <Def e.Exdf> e.Prog)>;
        };
     eF = <GetMod (e.Stack) e.Prog eF>;
     };

$ENTRY Swap sV (eA) = (<SWAP sV eA>);
Swaps tE tT = <Swap *Extern tE> <Swap *Ftable tT>;


Modext , {
   <Flag 'X'> : (eX) = '.' eX;
   <GETENV RESTYPE> : t1 e2 = '.' t1 e2;
   <GETS *SYSINFO 1 2> : {
          VECTOR NUMBER = '.rnx' ;
          VECTOR WORD   = '.rex' ;
          eX            = '.rsx' ;
   };     };

Compmod {
   eP , <GETV *Errfl> : = <PRINTLN "No syntax errors">
*   <DELETE <GETV <SyntModName>>>
    <CLOAD *CompFile "rccomp">
    = <Flag 'M'> : {
        F = <GETV *Modname> <Modext> : eN =
           <Open 'w' 4 eN> : {
           T = <WRITELN! 4 START <SETV X eN>>
              <Ptime "Compilation time = " (*CompFile eP)>
              <CLOSE 4> =;
           F = <ERR "Unable to open " eN>;
           };
        (eZ) = <Ptime "Compilation time = " (*CompMem eP)> : eL,
               <TABLE_VALUE *MODTABLE 'U' <SETV X <GETV *Modname> '.'>> : sR
               = <SETV sR <GETV sR> eL>;
        };
   eP = <SETV *ExitValue 10>;
   };

/* Differences between refal-6 and refal-J */

/* Exported and imported entities should be defined also as Extern in Refal-6
    whereas in refal-J they should be discriminated from that defined as Extern */
$ENTRY MakePortedExtern = T;
