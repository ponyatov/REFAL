************************************************************************
*  R E F A L - 6             Copyright (C) 1992 by Arkady Klimov       *
************************************************************************
* REFAL-C    compiler module:                                          *
*       rssynt.ref  - input and syntax check module                    *
************************************************************************
$package org.refal.j.compiler;

$EXTBOX
   Lineno  /* Line number */,
*  Errfl   /* Flag: error was detected */,
   Skipno  /* Line number to be referred to in error messages */,
   Ftable  /* Table for names (functions, boxes, etc).    */
           /*      Contents: (s.LineNo s.Export s.Prefix s.Used s.DynConst) */,
   Extern  /* Extern symbol list */,
*  Import  /* Imported from dedicated modules */,
*  Entry   /* Entry occurance indicator */,
*  Modes   /* Identifiers used as reference declaration keyword */
   Rest    /* A line to be processed */;

$EXPORT Getdef, Def, Use, Testdef, Extdef, 
        SetAttr, GetAttr, IsExtern, PublicAttr, DefinedIn, DefinedAs;

$FROM Rsserv  $IMPORT ERR, WNG, Flag, Addl, Oneof;
$FROM Rslex   $IMPORT Skipc, SkipLine, String, Isdelim, Word, Getelem, InsSC;
$FROM Rcmainj $IMPORT MakePortedExtern;
$FROM Rclist  $IMPORT Usefls, Builtcd;

$BOX Ind   /* Generator of new indices */;

Getdef { = <SETV *Ind 0> = <Getdefa <Skipc <GETV *Rest>>> };
Getdefa {
  0  ex = 0;
  '$' eA , <Word eA> : {
    '*' e1 = <ERREXP Keyword e1> <Skip0 e1>;
    sk eX , <IMPLODE <UPPER <EXPLODE sk>>> : sK : {
         {EXTRN; EXTERN; EXTERNAL} = <Ext <Lst N eX>>;
*        EXTBOX = <Ext <Lst N eX>>;
         {FUNC; ENTRY} = <Fname (sK) <Word eX>>;
         USE = <Usefls <Lst N eX>>;
         /* Key words MODULE and END are followed by a comment up to end of line */
         MODULE = (Module) <Continue <SkipLine eX>>;
         END    = (End) <Continue <SkipLine eX>>;
         PACKAGE = (Package eX);
         IMPORT  = (Import eX);
         FROM    = <From <Word eX>>;
         EXPORT  = <App &Export <Lst N eX>>;
         CONST   = <Dcls CONST <Lst E eX>>;
         s = <Dcls <Ckey sK> <Lst V eX>>;
         };
    };
  e1 = <Fname (FUNC) <Word e1>>;
  };

* Parse declaration list;
*  sD = N or V (values allowed) or E (delimeter '=' required, check no use before definition)
Lst sD e1 = <Lst1 sD <Word e1>>;
Lst1 {
   sD '*' e1 = <Skip0 e1>;
   sD sx e1 = <ChkNoUse sD sx> 
            = <Lstv sD sx <Skipc e1>> : tR e3 = tR <Lst2 sD e3>;
   };
   
ChkNoUse { 
    E sa = { <GetAttr 3 sa> : ' '; <ERR "Symbol " sa " was used before definition">};
    sD sa = ;
    };

Lstv {
   N sx e1 = sx e1;
   sD sx '=' e1 = <Lstv1 sx e1>;   
   V  sx     e1 = <Lstv1 sx e1>;
   sD sx     e1 = <ERREXP "=" e1> <Lstv1 sx e1>;
   };
Lstv1 sx e1 = <Pexpr R ('*') () e1> : (er) () e2 = (sx er) e2;
Lst2 {
   sD ',' e1 = <Lst sD e1>;
   sD ';' e1 = <Continue e1>;
   N  sa e1 = <Lst N sa e1>;
   sD sa e1 = <ERREXP ", or ;" sa e1> <Lst1 sD '*' sa e1>;
   };

Ext { ex = <Addl *Extern ex>; };

Export { sf = <SetAttr 1 sf Public> };

From {
    '*' e1 = <ERREXP Word e1> <Skip0 e1>;
    sM ex = <Skipc ex> : {
        '$' eA , <Word eA> : sK ey , <IMPLODE <UPPER <EXPLODE sK>>> : IMPORT
             = <App (&FromImport sM) <Lst N ey>> =;
        ez = <ERREXP "$import" ex> <Skip0 ex>;
        };
    };

FromImport { sm sf = <Def sf> 
                    = <DefineAsExtern sf> 
                    = <DefinedIn sf sm>; };

Expr { (X ex) ey = (Expr ex) <Expr ey>; = };

Dcls { sk ex = <Map (&Dcl sk) ex> };
Dcl {
   EXTBOX (sa er) = <Addl *Extern sa> = <Dcl BOX (sa)>;
   sk (sa er) = {
        sk : EXEC = (Var sk <BoxUse sa> er);
        <Def sa>  = (Var sk <Boxg   sa> er);
        }
   };

Ckey  sK , {
  <Oneof sK (BOX EXTBOX VECTOR CHAIN EMPTY STRING CHANNEL TABLE EXEC)> : T = sK;
  <BoxUse sK>; /* In Refal-6 it should be rather: <BoxUse sK> */
  };

Continue { ex = <SETV *Rest ex> = };

Skip0 ex = <Skip ('*') ('*') ex>;

Skip { e1 , <SETV *Skipno <GETV *Lineno>> = <Skip1 e1> };

Skip1 { (e1) (e2) e3 = <Skip1a (e1) (e2) <Skipc e3>>};
Skip1a{
   (e1) (e2) '(' ex = <Skip1 (e1) ((e2)) ex>;
   (e1) (e2) '<' ex = <Skip1 (e1) ('$'(e2)) ex>;
   (e1) (eZ) ')' ex , eZ : {
         (e2) e3    = <Skip1 (e1) (e2 (e3)) ex>;
          '*' e2    = <ERRUNP ')' ex> <Skip1 (e1) (eZ) ex>;
         '$'(e2) e3 = <ERRUNP ')' ex> <Skip1 (e1) (eZ) ex>;
         };
   (e1) (eZ) '>' ex , eZ : {
         '$'(e2) e3 = <Skip1 (e1) (e2 '*'(e3)) ex>;
         '*' e2     = <ERRUNP '>' ex> <Skip1 (e1) (eZ) ex>;
         (e2) e3    = <ERRUNP '(' ex> <Skip1 (e1) (e2 (e3)) '>' ex>;
         };
   (e1) (e2) '\'' ex = <Skips (e1) (e2) <String '\'' () ex>>;
   (e1) (e2) '\"' ex = <Skips (e1) (e2) <String '\"' () ex>>;
   (e1) ('*' e2) '{' ex = <Skip1 ((e1 e2)) ('*') ex>;
   ((e1) e2) ('*'e3) '}' ex = <Skip1 (e1 (e2 e3)) ('*') <InsSC ex>>;
   ('*' e1) ('*' e2) '}' ex = <ERRUNP '}' ex> <Skip1 ('*' e1) ('*' e2) ex>;
   ('*' e1) (e2) ';' ex = <Continue ex>;
   ('*' e1) ('*' e2) 0 ex = <Continue>; /* NEW (03.01.09) (Was: =;) */
   ((e1) e2) ('*' e3) 0 ex = <ERR "Unpaired { for line " <GETV *Skipno>>
           <Skip1 (e1 (e2)) ('*' e3) 0>;
   (e1) (e2) sx e3 = <Skip2 (e1) (e2) sx e3>;
   };

Skip2 {
   (e1) (e2) sx e3, <Isdelim sx> : T, e2 : {
         '$'(ea) eb = <ERRUNP '<'e3> <Skip1 (e1) (ea (eb)) sx e3>;
         (ea) eb = <ERRUNP '('e3> <Skip1 (e1) (ea (eb)) sx e3>;
         '*' ea = <Skip1 (e1) (e2 sx) e3>;
         };
   (e1) (e2) sa ex = <Skip1 (e1) (e2 sa) ex>;
   };

Skips { (e1) (e2) ta ex = <Skip1 (e1) (e2 ta) ex> };

Boxg {
   '*' e1 = '*' e1;
   sx e1 = <TABLE_VALUE *Ftable 'U' sx> e1;
   };

BoxUse {
   '*' e1 = '*' e1;
   sx e1 = <Use1 sx> e1;
   };

BoxRef {
   '*' e1 = '*' e1;
   sx e1 = <SetAttr 3 sx '*'> e1;
   };

Fname {
   (sk) '*' e1 = <ERR (e1) "Invalid function name"> <Skip ('*')('*') e1>;
   (sk) sf e1 = <Fnamea sk sf <Skipc e1>>;
   };

Fnamea {
   sk sf eA = <Prefix sk sf> <Def sf> = <Func <Boxg sf> <Sent L () () eA>>;
   };

Prefix {
   FUNC   sf =;
   ENTRY  sf = <Addl *Extern sf> /* <SETV *Entry T> */;
   };

Func {
   sf '*' (e1) (e2) ex = <Skip (e1) (e2) ex>;
   sf (es) ex = (Func sf <Mkgroup es>) <Continue ex>;
   };

Mkgroup {
   (G eb) = eb;
   es = (es);
   };

Cbody { sD (ev) eX = <Cbodya sD (ev) <Skipc eX>>};
Cbodya {
   sD (ev) '}' e1 = (<InsSC e1>) '+';
   sD (ev) sa ex = <Cbs sD (ev) <Senta sD () (ev) sa ex>>;
   };

Cbs {
   sD (ev) '*' (e1) (e2) ex = (((e1))(e2) ex) '*';
   sD (ev) (e1) ex = (e1) <Cbody sD (ev) ex>;
   };

Sentx { sD (es) (er) (ev) ex = <Sent 0 (es (sD er)) (ev) ex> };
Sent { sD (es) (ev) eX = <Senta sD <Check (es) (ev)> <Skipc eX>>};
Senta {
   sD (es) (ev) '/' ex = <Sent sD (es CUT) (ev) ex>;
   sD (es) (ev) '\\' ex = <Sent sD (es STAKE) (ev) ex>;
   sD (es) (ev) '#'  ex = <Sent sD (es ((NOT sD) (ev))) (ev) ex>;
    0 (es) (ev) ','  ex = <Sent  R (es) (ev) ex>;
    0 (es) (ev) '='  ex = <Sent  R (es DO) (ev) ex>;
    0 (es) (ev) '::' ex = <Sent  L (es BIND) (ev) ex>;
    0 (es) (ev) ':'  ex = <Sent  L (es) (ev) ex>;
    0 (es) (ev) ';'  ex = (es) ex;
    0 (es) (ev) '}'  ex = (es) '}' ex;
    0 (es) (ev) sa ex = <Serr ", : = ; or }" sa ex>;
   sD (es) (ev) '{' ex = <Sentg (es) (ev) <Cbody sD (ev) ex>>;
   sD (es) (ev) sa ex = <Sentx sD (es) <Pexpr sD ('*') (ev) sa ex>>;
   sD sM (ev) ex = <ERR (ex) sM> '*' ('*') ('*') ex;
   };

Sentg {
   (es) (ev) eb (ex) '*' = '*' ex;
   (es) (ev) eb (ex) '+' = <Sentx G (es) (eb) (ev) <Skipc ex>>;
   };
Serr  se ex = <ERRDEL se ex> '*' ('*') ('*') ';' ex;


Check  { ts tv, ts : {
    (eA tB tC) , tB : {
        BIND, tC : {
            (sT eL) = ts tv;
            tZ = "Pattern or block is expected after ::" tv;
            };
        ((NOT sD) t.ov) , tC : {
            (sT eX) = (eA NOT tC <Ckillr sD>) t.ov;
            tX = "Pattern or result or block is expected after #" tv;
            };
        tZ = ts tv;
        };
    (eA) = ts tv;
};  };

* Kill current result (in case of:  ... , #<...> : ...
Ckillr {
   R = (R );
   sD =;
   };

* Parsing expression
*   <Pexpr sD (e.Prep) (e.Vars) e.Line> == (e.Res) s.Delim e.Tail
Pexpr { sd (ea) (ev) ex = <Pexpra sd (ea) (ev) <Getelem <TYPE <Skipc ex>>>>};
Pexpra {
   sD (ea) (ev) Brac '(' ex = <Pexpr sD ((ea)) (ev) ex>;
   sD (ea) (ev) Brac ')' ex, ea : {
         (e1) e2 = <Pexpr sD (e1 (P e2)) (ev) ex>;
         sc e1 = <ERRUNP ')'ex> <Pexpr sD (sc e1) (ev) ex>;
         };
   sD (ea) (ev) Brac '>' ex, ea: {
         '$' (e1) e2 = <Pexpr sD (e1 (K <Cfun <TYPE e2>>)) (ev) ex>;
         (e1) e2 = <ERRUNP '(' ex> <Pexpr sD (e1 (e2)) (ev) '>' ex>;
         '*' e1 = <ERRUNP '>' ex> <Pexpr sD ('*' e1) (ev) ex>;
         };
   sD (e1) (ev) Brac '<' ex , sD : {
       R , <Flag '6'> : (ez) = <Pexpr  sD ('$'(e1)) (ev) ex>;
       R = <Word ex> : {
                '*' ey = <Pexpr sD (e1) (ev) ex>;
                sf  ey = <Pexpr sD ('$'(e1) sf) (ev) ey>;
                };
       L = <ERR (ex) "Invalid character < in the pattern">
              <Pexpr sD (e1) (ev) ex>;
       };
   sD (e1) (ev) Var su '*' ex , sD : {
           R = <ERR (ex) "Missing index"> <Pexpr sD (e1)(ev) ex>;
           L = <Pexpr sD (e1 <Mk-var su <Nind>>) (ev) ex>;
           };
   sD (e1) (ev) Var su si ex
       = <Pexpr sD (e1 <Mk-var su si>) <Testvar sD (su si) (ev) ex>>;
   sD (e1) (ev) Delim st ex, e1 : {
       '*' ea     = (ea) (ev) st ex;
       (ea) eb    = <ERRUNP '(' ex> <Pexpr sD (ea (eb)) (ev) st ex>;
       '$' (ea) eb = <ERRUNP '<' ex> <Pexpr sD (ea (eb)) (ev) st ex>;
       };
   sD (e1) (ev) Symbol st   ex = <Pexpr sD (e1 st) (ev) ex>;
   sD (e1) (ev) Box    st   ex = <Pexpr sD (e1 <BoxRef st>) (ev) ex>;
   sD (e1) (ev) String (es) ex = <Pexpr sD (e1 es) (ev) ex>;
   sD (e1) (ev) Other st ex = <ERR (ex) "Invalid character "st>
              <Pexpr sD (e1)(ev) ex>;
   };



Testvar {
   sD (sx si) (ea (sy si) eb) ez , sx : {
      sy = (ea (sy si) eb) ez;
      sw = (ea (sy si) eb (sx si)) ez
           <ERR (ez) "Different type variables with equal index: "
                  sx '.' si " and " sy '.' si>;
      };
   L (sx si) (ea) ez = (ea (sx si)) ez;
   R (sx si) (ea) ez = (ea) ez
         <ERR (ez) "Variable " sx '.' si " is undefined">;
   };

Mk-var { 
    'v' ti = (T ti) (E ti);
    su ti = (<SETV X <UPPER su>> ti) 
    };

Nind { , <GETV *Ind> : sN , <SETV *Ind <ADD sN 1>> = sN };

Def {
   sx e1 = <Def1 sx <TABLE_VALUE *Ftable 'U' sx>> = <Def e1>;
   = ;
   };

Def1 { sx sr , <GETN sr 0> : {
   sn: {' ';'.'} =  <SETN sr 0 <GETV *Lineno>>; /* NEW!!! */
   ty = <WNG "Function " sx " is redefined">;
}; };

Use { ex = <App &Use1 ex> };
Use1 { sx = <DefAttr 3 sx 'u'> };

Cfun {
   'F' sf ex = <BoxUse sf> ex;
   st ta  ex = ta ex;
   };

Testdef  = <Td <TABLE_LIST *Ftable>> ;
Td { sx sr e2 = <Td1 sx <GETS sr 0 4>> = <Td e2>; =};
Td1 { sx s.line s.export s.prefix s.used = {
   s.line:' ' = {
      <Oneof sx (THISTABLE MU)> : T = ;
      <IsExtern sx> : T =;
      <Builtcd sx> : {
            '*'     = <WNG "Symbol "<ENCODE 0 sx> " is undefined"> <Addl *Extern sx>; 
            sy      = <Addl *Extern sx>; 
            (sC sM) = <DefinedAs sx (sC sM)>;
            };
      };
   s.prefix : #' ' , <MakePortedExtern> : F, <IsExtern sx> : T, 
        <ERR ((s.line 0)) "Imported symbol "<ENCODE 0 sx>" declared extern">, {}; 
   s.export : Public = <DefineAsExtern sx>;
   s.used : ' ' = { 
        <IsExtern sx> : T, s.prefix : ' '; /* $extern, not $import $from */
        <WNG ((s.line 0)) "Symbol "<ENCODE 0 sx>" never used">; 
        };
   /* otherwise do nothing */;
   }};

* A list of defined external symbols
Extdef = <Ed <GETV *Extern>>;
Ed { sx ey = <Ed1 sx> <Ed ey>; = };
Ed1 { sx = <TABLE_VALUE *Ftable 'O' sx> : {
             /* Empty */ = <WNG "EXTERN symbol "<ENCODE 0 sx>" never used">;
             sy , <GETN sy 0> : {
                  ' ' =;
                  sn  = sx;
             }}};

ERREXP  sa ex = <ERR (ex) "Expected " sa> ;
ERRUNP  sa ex = <ERR (ex) "Unpaired " sa> ;
ERRDEL {
  se 0  ex = <ERR (ex) "Unexpected end of text (" se " is expected)">;
  se sd ex = <ERR (ex) "Invalid delimiter " sd " (" se " is expected)">;
  };

/**********************************************************************/
SetAttr { sn sf ta = <SETN <TABLE_VALUE *Ftable 'U' sf> sn ta>};
GetAttr { sn sf    = <GETN <TABLE_VALUE *Ftable 'U' sf> sn>};
* Set if yet undefined
DefAttr { sn sf ta = <SetAttr sn sf <Opt <GetAttr sn sf> ta>> };
Opt { sx ta = { sx:' ' = ta; sx }};

IsExtern { sf = { <POS *Extern sf> : vx = T; F }};

PublicAttr { sf = { 
*       <IsExtern sf> : T = Public; 
        <GetAttr 1 sf>;
        }};
        
DefinedIn { s.fname s.modname = <SetAttr 2 s.fname s.modname> }; 
DefinedAs { s.fname (e.jname)   = <SetAttr 2 s.fname (e.jname)> }; 

DefineAsExtern sx , <MakePortedExtern> : {
        T = <Addl *Extern sx>; /* Only in Refal-6 */
        F = 
        };

*$EXEC  TRC  Testdef Td1;
